export default defineBackground(() => {
  console.log('GitHub PR Helper background service started', { id: browser.runtime.id });

  // Listen for messages from the content script
  browser.runtime.onMessage.addListener(async (message, sender) => {
    if (message.action === 'generatePRDescription') {
      return await handleGeneratePRDescription(message.data);
    }
  });
});

async function handleGeneratePRDescription(data: any) {
  try {
    // In a real implementation, you would make an API call to your AI service
    // For example, using OpenAI or another AI service:
    
    /*
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${YOUR_API_KEY}` // You would need to store this securely
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'You are a helpful assistant that generates PR descriptions based on code changes.'
          },
          {
            role: 'user',
            content: `Generate a comprehensive PR description in markdown format based on these changes.
            PR Title: ${data.prTitle}
            Branch Info: ${data.branchInfo}
            Diff Data: ${data.diffData}`
          }
        ],
        temperature: 0.7
      })
    });
    
    const result = await response.json();
    const generatedDescription = result.choices[0].message.content;
    
    return { generatedDescription };
    */
    
    // For demonstration purposes, return a placeholder
    return {
      generatedDescription: `# ${data.prTitle || 'Pull Request Description'}

## Summary
This PR includes changes related to ${data.prTitle || 'the codebase'}.

## Changes Made
${generateSummaryFromDiff(data.diffData)}

## Testing
- [ ] Manual testing has been completed
- [ ] Unit tests have been added/updated

## Additional Notes
- Branch information: ${data.branchInfo || 'Not available'}

---
*This description was auto-generated by the GitHub PR Helper extension. Please edit as needed.*`
    };
  } catch (error) {
    console.error('Error generating PR description:', error);
    return { error: 'Failed to generate PR description' };
  }
}

// Helper function to create a summary from diff data
function generateSummaryFromDiff(diffData: any) {
  if (!diffData || diffData.length < 10) {
    return 'No significant changes detected.';
  }
  
  // Extract file names from the diff data
  const fileRegex = /## (.+)/g;
  const files = [];
  let match;
  
  while ((match = fileRegex.exec(diffData)) !== null) {
    files.push(match[1]);
  }
  
  // Generate a summary based on the files changed
  if (files.length === 0) {
    return 'Changes made to unidentified files.';
  } else if (files.length === 1) {
    return `Changes made to ${files[0]}.`;
  } else {
    const lastFile = files.pop();
    return `Changes made to ${files.join(', ')} and ${lastFile}.`;
  }
}
